{"version":3,"sources":["components/ControlBar.jsx","components/Table.jsx","components/Total.jsx","App.js","index.js"],"names":["ControlBar","onSubmit","onAddRow","useState","rows","setRows","columns","setColumns","handleSubmit","e","preventDefault","className","type","name","value","onChange","target","Number","required","onClick","Table","matrix","tableValues","onDelRow","getMatrixSum","sumArray","forEach","arr","el","idx","undefined","map","row","rowIdx","column","colIdx","Math","round","length","Total","getMatrixTotal","flatMap","reduce","acc","flatMatrixLength","getTotalAverage","initialState","numColumns","getRandomNumber","min","max","floor","random","reducer","state","action","createdTableValues","payload","i","colArray","push","newRow","newTableValues","filter","App","useReducer","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0e7baf3.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport default function ControlBar({ onSubmit, onAddRow }) {\r\n  const [rows, setRows] = useState(0);\r\n  const [columns, setColumns] = useState(0);\r\n\r\n  function handleChangeRows(e) {\r\n    const { value } = e.target;\r\n    setRows(Number(value));\r\n  }\r\n\r\n  function handleChangeColumns(e) {\r\n    const { value } = e.target;\r\n    setColumns(Number(value));\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    onSubmit({ rows, columns });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form className=\"form\" onSubmit={(e) => handleSubmit(e)}>\r\n        <label className=\"inputLabel\">\r\n          <span className=\"labelText\">Rows</span>\r\n          <input\r\n            type=\"number\"\r\n            name=\"rows\"\r\n            className=\"input\"\r\n            value={rows}\r\n            onChange={handleChangeRows}\r\n            required\r\n          />\r\n        </label>\r\n        <label className=\"inputLabel\">\r\n          <span className=\"labelText\">Columns</span>\r\n          <input\r\n            type=\"number\"\r\n            name=\"columns\"\r\n            className=\"input\"\r\n            value={columns}\r\n            onChange={handleChangeColumns}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Create table</button>\r\n      </form>\r\n      <button type=\"button\" onClick={() => onAddRow()}>\r\n        Add row\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n","export default function Table({ tableValues, onDelRow }) {\r\n  function getMatrixSum(matrix) {\r\n    const sumArray = [];\r\n\r\n    matrix.forEach((arr) => {\r\n      arr.forEach((el, idx) => {\r\n        if (sumArray[idx] === undefined) sumArray[idx] = 0;\r\n\r\n        sumArray[idx] += el;\r\n      });\r\n    });\r\n    return sumArray;\r\n  }\r\n\r\n  function getMatrixAvarage(matrix) {\r\n    return getMatrixSum(matrix).map((el) => Math.round(el / matrix.length));\r\n  }\r\n\r\n  return (\r\n    <table>\r\n      <tbody className=\"tableBody\">\r\n        {tableValues.map((row, rowIdx) => (\r\n          <tr className=\"bodyRow\" key={rowIdx} onClick={() => onDelRow(rowIdx)}>\r\n            {row.map((column, colIdx) => (\r\n              <td key={colIdx}>{column}</td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n      <tfoot>\r\n        <tr className=\"footRow\">\r\n          {getMatrixAvarage(tableValues).map((column, idx) => (\r\n            <td key={idx}>{column}</td>\r\n          ))}\r\n        </tr>\r\n        <tr className=\"footRow\">\r\n          {getMatrixSum(tableValues).map((column, idx) => (\r\n            <td key={idx}>{column}</td>\r\n          ))}\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  );\r\n}\r\n","export default function Total({ tableValues }) {\r\n  function getMatrixTotal(matrix) {\r\n    return matrix.flatMap((el) => el).reduce((el, acc) => (acc += el), 0);\r\n  }\r\n\r\n  function getTotalAverage(matrix) {\r\n    if (!getMatrixTotal(matrix)) return 0;\r\n\r\n    const flatMatrixLength = matrix.flatMap((el) => el).length;\r\n\r\n    return Math.round(getMatrixTotal(matrix) / flatMatrixLength);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>Total: {getMatrixTotal(tableValues)}</div>\r\n      <div>Total avarage: {getTotalAverage(tableValues)}</div>\r\n    </div>\r\n  );\r\n}\r\n","import { useReducer } from \"react\";\nimport \"./App.css\";\nimport ControlBar from \"./components/ControlBar\";\nimport Table from \"./components/Table\";\nimport Total from \"./components/Total\";\n\nconst initialState = { tableValues: [], numColumns: 0 };\n\nfunction getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"createTable\":\n      const createdTableValues = [];\n      const { columns, rows } = action.payload;\n\n      for (let i = 0; i < rows; i++) {\n        const colArray = [];\n\n        for (let i = 0; i < columns; i++) {\n          colArray.push(getRandomNumber(100, 999));\n        }\n        createdTableValues.push(colArray);\n      }\n\n      return {\n        ...state,\n        tableValues: createdTableValues,\n        numColumns: columns,\n      };\n\n    case \"addRow\":\n      const newRow = [];\n\n      for (let i = 0; i < state.numColumns; i++) {\n        newRow.push(getRandomNumber(100, 999));\n      }\n\n      return {\n        ...state,\n        tableValues: [...state.tableValues, newRow],\n      };\n\n    case \"delRow\":\n      const newTableValues = state.tableValues.filter(\n        (row, idx) => idx !== action.payload\n      );\n\n      return {\n        ...state,\n        tableValues: newTableValues,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function onSubmit({ rows, columns }) {\n    dispatch({ type: \"createTable\", payload: { rows, columns } });\n  }\n  function onAddRow() {\n    if (state.tableValues.length > 0) dispatch({ type: \"addRow\" });\n  }\n  function onDelRow(idx) {\n    dispatch({ type: \"delRow\", payload: idx });\n  }\n\n  return (\n    <div className=\"App\">\n      <ControlBar onSubmit={onSubmit} onAddRow={onAddRow} />\n\n      {state.tableValues.length > 0 && (\n        <>\n          <Table tableValues={state.tableValues} onDelRow={onDelRow} />\n          <Total tableValues={state.tableValues} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}